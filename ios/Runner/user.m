// Autogenerated from Pigeon (v1.0.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "user.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface UserModel ()
+ (UserModel *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface AvatarUrl ()
+ (AvatarUrl *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation UserModel
+ (UserModel *)fromMap:(NSDictionary *)dict {
  UserModel *result = [[UserModel alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.firstname = dict[@"firstname"];
  if ((NSNull *)result.firstname == [NSNull null]) {
    result.firstname = nil;
  }
  result.lastname = dict[@"lastname"];
  if ((NSNull *)result.lastname == [NSNull null]) {
    result.lastname = nil;
  }
  result.email = dict[@"email"];
  if ((NSNull *)result.email == [NSNull null]) {
    result.email = nil;
  }
  result.location = dict[@"location"];
  if ((NSNull *)result.location == [NSNull null]) {
    result.location = nil;
  }
  result.phone = dict[@"phone"];
  if ((NSNull *)result.phone == [NSNull null]) {
    result.phone = nil;
  }
  result.avatarUrl = [AvatarUrl fromMap:dict[@"avatarUrl"]];
  if ((NSNull *)result.avatarUrl == [NSNull null]) {
    result.avatarUrl = nil;
  }
  result.state = dict[@"state"];
  if ((NSNull *)result.state == [NSNull null]) {
    result.state = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", (self.firstname ? self.firstname : [NSNull null]), @"firstname", (self.lastname ? self.lastname : [NSNull null]), @"lastname", (self.email ? self.email : [NSNull null]), @"email", (self.location ? self.location : [NSNull null]), @"location", (self.phone ? self.phone : [NSNull null]), @"phone", (self.avatarUrl ? [self.avatarUrl toMap] : [NSNull null]), @"avatarUrl", (self.state ? self.state : [NSNull null]), @"state", (self.type ? self.type : [NSNull null]), @"type", nil];
}
@end

@implementation AvatarUrl
+ (AvatarUrl *)fromMap:(NSDictionary *)dict {
  AvatarUrl *result = [[AvatarUrl alloc] init];
  result.url = dict[@"url"];
  if ((NSNull *)result.url == [NSNull null]) {
    result.url = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.url ? self.url : [NSNull null]), @"url", nil];
}
@end

@interface FlutterUserApiCodecReader : FlutterStandardReader
@end
@implementation FlutterUserApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [AvatarUrl fromMap:[self readValue]];
    
    case 129:     
      return [UserModel fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FlutterUserApiCodecWriter : FlutterStandardWriter
@end
@implementation FlutterUserApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[AvatarUrl class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[UserModel class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FlutterUserApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterUserApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FlutterUserApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FlutterUserApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FlutterUserApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FlutterUserApiCodecReaderWriter *readerWriter = [[FlutterUserApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface FlutterUserApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FlutterUserApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)displayUserDetailsUserModel:(UserModel *)arg_userModel completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterUserApi.displayUserDetails"
      binaryMessenger:self.binaryMessenger
      codec:FlutterUserApiGetCodec()];
  [channel sendMessage:@[arg_userModel] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface UserModelApiCodecReader : FlutterStandardReader
@end
@implementation UserModelApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [AvatarUrl fromMap:[self readValue]];
    
    case 129:     
      return [UserModel fromMap:[self readValue]];
    
    case 130:     
      return [UserModel fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface UserModelApiCodecWriter : FlutterStandardWriter
@end
@implementation UserModelApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[AvatarUrl class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[UserModel class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[UserModel class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface UserModelApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation UserModelApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[UserModelApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[UserModelApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *UserModelApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    UserModelApiCodecReaderWriter *readerWriter = [[UserModelApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void UserModelApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<UserModelApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UserModelApi.getUser"
        binaryMessenger:binaryMessenger
        codec:UserModelApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserKeyword:error:)], @"UserModelApi api (%@) doesn't respond to @selector(getUserKeyword:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_keyword = args[0];
        FlutterError *error;
        NSArray<UserModel *> *output = [api getUserKeyword:arg_keyword error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UserModelApi.cancel"
        binaryMessenger:binaryMessenger
        codec:UserModelApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cancelWithError:)], @"UserModelApi api (%@) doesn't respond to @selector(cancelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api cancelWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UserModelApi.finishEditingProfile"
        binaryMessenger:binaryMessenger
        codec:UserModelApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(finishEditingProfileUserModel:error:)], @"UserModelApi api (%@) doesn't respond to @selector(finishEditingProfileUserModel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UserModel *arg_userModel = args[0];
        FlutterError *error;
        [api finishEditingProfileUserModel:arg_userModel error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
