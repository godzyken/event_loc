// Autogenerated from Pigeon (v1.0.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "book.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface BookModel ()
+ (BookModel *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface Thumbnail ()
+ (Thumbnail *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation BookModel
+ (BookModel *)fromMap:(NSDictionary *)dict {
  BookModel *result = [[BookModel alloc] init];
  result.title = dict[@"title"];
  if ((NSNull *)result.title == [NSNull null]) {
    result.title = nil;
  }
  result.urlImage = dict[@"urlImage"];
  if ((NSNull *)result.urlImage == [NSNull null]) {
    result.urlImage = nil;
  }
  result.author = dict[@"author"];
  if ((NSNull *)result.author == [NSNull null]) {
    result.author = nil;
  }
  result.summary = dict[@"summary"];
  if ((NSNull *)result.summary == [NSNull null]) {
    result.summary = nil;
  }
  result.publishDate = dict[@"publishDate"];
  if ((NSNull *)result.publishDate == [NSNull null]) {
    result.publishDate = nil;
  }
  result.pageCount = dict[@"pageCount"];
  if ((NSNull *)result.pageCount == [NSNull null]) {
    result.pageCount = nil;
  }
  result.thumbnail = [Thumbnail fromMap:dict[@"thumbnail"]];
  if ((NSNull *)result.thumbnail == [NSNull null]) {
    result.thumbnail = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.title ? self.title : [NSNull null]), @"title", (self.urlImage ? self.urlImage : [NSNull null]), @"urlImage", (self.author ? self.author : [NSNull null]), @"author", (self.summary ? self.summary : [NSNull null]), @"summary", (self.publishDate ? self.publishDate : [NSNull null]), @"publishDate", (self.pageCount ? self.pageCount : [NSNull null]), @"pageCount", (self.thumbnail ? [self.thumbnail toMap] : [NSNull null]), @"thumbnail", nil];
}
@end

@implementation Thumbnail
+ (Thumbnail *)fromMap:(NSDictionary *)dict {
  Thumbnail *result = [[Thumbnail alloc] init];
  result.url = dict[@"url"];
  if ((NSNull *)result.url == [NSNull null]) {
    result.url = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.url ? self.url : [NSNull null]), @"url", nil];
}
@end

@interface FlutterBookApiCodecReader : FlutterStandardReader
@end
@implementation FlutterBookApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [BookModel fromMap:[self readValue]];
    
    case 129:     
      return [Thumbnail fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FlutterBookApiCodecWriter : FlutterStandardWriter
@end
@implementation FlutterBookApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[BookModel class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[Thumbnail class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FlutterBookApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterBookApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FlutterBookApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FlutterBookApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FlutterBookApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FlutterBookApiCodecReaderWriter *readerWriter = [[FlutterBookApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface FlutterBookApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FlutterBookApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)displayBookDetailsBookModel:(BookModel *)arg_bookModel completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterBookApi.displayBookDetails"
      binaryMessenger:self.binaryMessenger
      codec:FlutterBookApiGetCodec()];
  [channel sendMessage:@[arg_bookModel] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface BookModelApiCodecReader : FlutterStandardReader
@end
@implementation BookModelApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [BookModel fromMap:[self readValue]];
    
    case 129:     
      return [BookModel fromMap:[self readValue]];
    
    case 130:     
      return [Thumbnail fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface BookModelApiCodecWriter : FlutterStandardWriter
@end
@implementation BookModelApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[BookModel class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[BookModel class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[Thumbnail class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface BookModelApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BookModelApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BookModelApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BookModelApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BookModelApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    BookModelApiCodecReaderWriter *readerWriter = [[BookModelApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void BookModelApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BookModelApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.BookModelApi.search"
        binaryMessenger:binaryMessenger
        codec:BookModelApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchKeyword:error:)], @"BookModelApi api (%@) doesn't respond to @selector(searchKeyword:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_keyword = args[0];
        FlutterError *error;
        NSArray<BookModel *> *output = [api searchKeyword:arg_keyword error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.BookModelApi.cancel"
        binaryMessenger:binaryMessenger
        codec:BookModelApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cancelWithError:)], @"BookModelApi api (%@) doesn't respond to @selector(cancelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api cancelWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.BookModelApi.finishEditingBook"
        binaryMessenger:binaryMessenger
        codec:BookModelApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(finishEditingBookBookModel:error:)], @"BookModelApi api (%@) doesn't respond to @selector(finishEditingBookBookModel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        BookModel *arg_bookModel = args[0];
        FlutterError *error;
        [api finishEditingBookBookModel:arg_bookModel error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
