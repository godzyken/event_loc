// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class UserModel {
  String? id;
  String? firstname;
  String? lastname;
  String? email;
  String? location;
  String? phone;
  String? avatarUrl;
  String? state;
  String? type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['firstname'] = firstname;
    pigeonMap['lastname'] = lastname;
    pigeonMap['email'] = email;
    pigeonMap['location'] = location;
    pigeonMap['phone'] = phone;
    pigeonMap['avatarUrl'] = avatarUrl;
    pigeonMap['state'] = state;
    pigeonMap['type'] = type;
    return pigeonMap;
  }

  static UserModel decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return UserModel()
      ..id = pigeonMap['id'] as String?
      ..firstname = pigeonMap['firstname'] as String?
      ..lastname = pigeonMap['lastname'] as String?
      ..email = pigeonMap['email'] as String?
      ..location = pigeonMap['location'] as String?
      ..phone = pigeonMap['phone'] as String?
      ..avatarUrl = pigeonMap['avatarUrl'] as String?
      ..state = pigeonMap['state'] as String?
      ..type = pigeonMap['type'] as String?;
  }
}

class Reply {
  UserModel? userModel;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['userModel'] = userModel == null ? null : userModel!.encode();
    return pigeonMap;
  }

  static Reply decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Reply()
      ..userModel = pigeonMap['userModel'] != null
          ? UserModel.decode(pigeonMap['userModel']!)
          : null;
  }
}

class _UserModelApiCodec extends StandardMessageCodec {
  const _UserModelApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Reply) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is UserModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return Reply.decode(readValue(buffer)!);
      
      case 129:       
        return UserModel.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class UserModelApi {
  static const MessageCodec<Object?> codec = _UserModelApiCodec();

  void onReply(Reply reply);
  static void setup(UserModelApi? api) {
    {
      const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.UserModelApi.onReply', codec);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.UserModelApi.onReply was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Reply? arg_reply = args[0] as Reply?;
          assert(arg_reply != null, 'Argument for dev.flutter.pigeon.UserModelApi.onReply was null, expected non-null Reply.');
          api.onReply(arg_reply!);
          return;
        });
      }
    }
  }
}
