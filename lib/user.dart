// Autogenerated from Pigeon (v1.0.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class UserModel {
  String? id;
  String? firstname;
  String? lastname;
  String? email;
  String? location;
  String? phone;
  AvatarUrl? avatarUrl;
  String? state;
  String? type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['firstname'] = firstname;
    pigeonMap['lastname'] = lastname;
    pigeonMap['email'] = email;
    pigeonMap['location'] = location;
    pigeonMap['phone'] = phone;
    pigeonMap['avatarUrl'] = avatarUrl == null ? null : avatarUrl!.encode();
    pigeonMap['state'] = state;
    pigeonMap['type'] = type;
    return pigeonMap;
  }

  static UserModel decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return UserModel()
      ..id = pigeonMap['id'] as String?
      ..firstname = pigeonMap['firstname'] as String?
      ..lastname = pigeonMap['lastname'] as String?
      ..email = pigeonMap['email'] as String?
      ..location = pigeonMap['location'] as String?
      ..phone = pigeonMap['phone'] as String?
      ..avatarUrl = pigeonMap['avatarUrl'] != null
          ? AvatarUrl.decode(pigeonMap['avatarUrl']!)
          : null
      ..state = pigeonMap['state'] as String?
      ..type = pigeonMap['type'] as String?;
  }
}

class AvatarUrl {
  String? url;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['url'] = url;
    return pigeonMap;
  }

  static AvatarUrl decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AvatarUrl()
      ..url = pigeonMap['url'] as String?;
  }
}

class _FlutterUserApiCodec extends StandardMessageCodec {
  const _FlutterUserApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AvatarUrl) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is UserModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AvatarUrl.decode(readValue(buffer)!);
      
      case 129:       
        return UserModel.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class FlutterUserApi {
  static const MessageCodec<Object?> codec = _FlutterUserApiCodec();

  void displayUserDetails(UserModel userModel);
  static void setup(FlutterUserApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterUserApi.displayUserDetails', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterUserApi.displayUserDetails was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UserModel? arg_userModel = (args[0] as UserModel?);
          assert(arg_userModel != null, 'Argument for dev.flutter.pigeon.FlutterUserApi.displayUserDetails was null, expected non-null UserModel.');
          api.displayUserDetails(arg_userModel!);
          return;
        });
      }
    }
  }
}

class _UserModelApiCodec extends StandardMessageCodec {
  const _UserModelApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AvatarUrl) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is UserModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is UserModel) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AvatarUrl.decode(readValue(buffer)!);
      
      case 129:       
        return UserModel.decode(readValue(buffer)!);
      
      case 130:       
        return UserModel.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class UserModelApi {
  /// Constructor for [UserModelApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UserModelApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _UserModelApiCodec();

  Future<List<UserModel?>> getUser(String arg_keyword) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserModelApi.getUser', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_keyword]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as List<Object?>?)!.cast<UserModel?>();
    }
  }

  Future<void> cancel() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserModelApi.cancel', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> finishEditingProfile(UserModel arg_userModel) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserModelApi.finishEditingProfile', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_userModel]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
