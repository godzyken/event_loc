// Autogenerated from Pigeon (v1.0.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class User {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserModel {
    private String id;
    public String getId() { return id; }
    public void setId(String setterArg) { this.id = setterArg; }

    private String firstname;
    public String getFirstname() { return firstname; }
    public void setFirstname(String setterArg) { this.firstname = setterArg; }

    private String lastname;
    public String getLastname() { return lastname; }
    public void setLastname(String setterArg) { this.lastname = setterArg; }

    private String email;
    public String getEmail() { return email; }
    public void setEmail(String setterArg) { this.email = setterArg; }

    private String location;
    public String getLocation() { return location; }
    public void setLocation(String setterArg) { this.location = setterArg; }

    private String phone;
    public String getPhone() { return phone; }
    public void setPhone(String setterArg) { this.phone = setterArg; }

    private AvatarUrl avatarUrl;
    public AvatarUrl getAvatarUrl() { return avatarUrl; }
    public void setAvatarUrl(AvatarUrl setterArg) { this.avatarUrl = setterArg; }

    private String state;
    public String getState() { return state; }
    public void setState(String setterArg) { this.state = setterArg; }

    private String type;
    public String getType() { return type; }
    public void setType(String setterArg) { this.type = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("firstname", firstname);
      toMapResult.put("lastname", lastname);
      toMapResult.put("email", email);
      toMapResult.put("location", location);
      toMapResult.put("phone", phone);
      toMapResult.put("avatarUrl", (avatarUrl == null) ? null : avatarUrl.toMap());
      toMapResult.put("state", state);
      toMapResult.put("type", type);
      return toMapResult;
    }
    static UserModel fromMap(Map<String, Object> map) {
      UserModel fromMapResult = new UserModel();
      Object id = map.get("id");
      fromMapResult.id = (String)id;
      Object firstname = map.get("firstname");
      fromMapResult.firstname = (String)firstname;
      Object lastname = map.get("lastname");
      fromMapResult.lastname = (String)lastname;
      Object email = map.get("email");
      fromMapResult.email = (String)email;
      Object location = map.get("location");
      fromMapResult.location = (String)location;
      Object phone = map.get("phone");
      fromMapResult.phone = (String)phone;
      Object avatarUrl = map.get("avatarUrl");
      fromMapResult.avatarUrl = AvatarUrl.fromMap((Map)avatarUrl);
      Object state = map.get("state");
      fromMapResult.state = (String)state;
      Object type = map.get("type");
      fromMapResult.type = (String)type;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AvatarUrl {
    private String url;
    public String getUrl() { return url; }
    public void setUrl(String setterArg) { this.url = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("url", url);
      return toMapResult;
    }
    static AvatarUrl fromMap(Map<String, Object> map) {
      AvatarUrl fromMapResult = new AvatarUrl();
      Object url = map.get("url");
      fromMapResult.url = (String)url;
      return fromMapResult;
    }
  }
  private static class FlutterUserApiCodec extends StandardMessageCodec {
    public static final FlutterUserApiCodec INSTANCE = new FlutterUserApiCodec();
    private FlutterUserApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AvatarUrl.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return UserModel.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AvatarUrl) {
        stream.write(128);
        writeValue(stream, ((AvatarUrl) value).toMap());
      } else 
      if (value instanceof UserModel) {
        stream.write(129);
        writeValue(stream, ((UserModel) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterUserApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterUserApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterUserApiCodec.INSTANCE;
    }

    public void displayUserDetails(UserModel userModelArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterUserApi.displayUserDetails", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(userModelArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class UserModelApiCodec extends StandardMessageCodec {
    public static final UserModelApiCodec INSTANCE = new UserModelApiCodec();
    private UserModelApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AvatarUrl.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return UserModel.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return UserModel.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AvatarUrl) {
        stream.write(128);
        writeValue(stream, ((AvatarUrl) value).toMap());
      } else 
      if (value instanceof UserModel) {
        stream.write(129);
        writeValue(stream, ((UserModel) value).toMap());
      } else 
      if (value instanceof UserModel) {
        stream.write(130);
        writeValue(stream, ((UserModel) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface UserModelApi {
    List<UserModel> getUser(String keyword);
    void cancel();
    void finishEditingProfile(UserModel userModel);

    /** The codec used by UserModelApi. */
    static MessageCodec<Object> getCodec() {
      return UserModelApiCodec.INSTANCE;
    }

    /** Sets up an instance of `UserModelApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, UserModelApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UserModelApi.getUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keywordArg = (String)args.get(0);
              if (keywordArg == null) {
                throw new NullPointerException("keywordArg unexpectedly null.");
              }
              List<UserModel> output = api.getUser(keywordArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UserModelApi.cancel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.cancel();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UserModelApi.finishEditingProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              UserModel userModelArg = (UserModel)args.get(0);
              if (userModelArg == null) {
                throw new NullPointerException("userModelArg unexpectedly null.");
              }
              api.finishEditingProfile(userModelArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
